{"version":3,"file":"sendTextgenStreamingResponse.js","sourceRoot":"","sources":["../../src/textgen/sendTextgenStreamingResponse.ts"],"names":[],"mappings":"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","sourcesContent":["import { logDebug } from \"./logDebug\";\nimport { toTextgenFetchParams } from \"./toTextgenFetchParams\";\n\nimport { TextDecoderStream } from \"../polyfill/TextStreamPolyfill\";\n\nimport type { Env } from \"../Env\";\nimport { createConsumer } from \"./createConsumer\";\nimport { dataParser } from \"./dataParser\";\nimport type { ConnectionListener } from \"@mjt-engine/message\";\nimport {\n  type TextgenConnectionMap,\n  DEFAULT_STOP,\n} from \"@mjt-services/textgen-common-2025\";\nimport { Parsers } from \"@mjt-engine/parse\";\nexport const sendTextgenStreamingResponse: ConnectionListener<\n  TextgenConnectionMap,\n  \"textgen.generate\",\n  Env\n> = async ({ signal, detail, headers, send, sendError, env }) => {\n  const stream = new TextDecoderStream();\n  const buffer: string[] = [];\n  const finishedConsumingAbortController = new AbortController();\n  const finishedConsumingSignal = finishedConsumingAbortController.signal;\n  const onAbort = () => {\n    finishedConsumingAbortController.abort();\n  };\n  signal.addEventListener(\"abort\", onAbort);\n  finishedConsumingSignal.addEventListener(\"abort\", () => {\n    console.log(\"finishedConsumingSignal aborted\");\n  });\n  const { authToken, body, url } = toTextgenFetchParams({\n    request: detail,\n    headers,\n    env,\n  });\n\n  logDebug(\"message.detail\", {\n    url,\n    body,\n    authToken,\n  });\n  const response = await fetch(url, {\n    method: \"POST\",\n    // signal,\n    signal: finishedConsumingSignal,\n    headers: {\n      Authorization: `Bearer ${authToken} `,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  })\n    .catch((error) => {\n      console.log(error);\n      sendError(error);\n      return undefined;\n    })\n    .finally(() => {\n      if (signal) {\n        signal.removeEventListener(\"abort\", onAbort);\n      }\n    });\n  if (!response || !response.ok || !response.body) {\n    throw new Error(`Bad response: ${response?.status}`, { cause: response });\n  }\n\n  const pipe = response.body.pipeThrough(stream);\n  const reader = pipe.getReader();\n\n  const { stop = [], stopAfter = [] } = detail.options ?? {};\n\n  await Parsers.createSseParser({\n    signal,\n    consumer: createConsumer({\n      buffer,\n      finishedConsumingAbortController,\n      send,\n      stop: [...DEFAULT_STOP, ...stop],\n      stopAfter,\n    }),\n    reader,\n    onError: async (error) => {\n      sendError(error);\n    },\n    onDone: () => {},\n    dataParser,\n  });\n  // send sentinel message to indicate that the stream is done\n  send();\n};\n"]}